{
 'Реквизиты': {
  'Код': '000000003',
  'Наименование': 'Контроль минимальных остатков',
  'ТекстОбработки': 'Кому = "ANovikov@t-medica.com";

УИДОрганизации = ПолучитьЗначениеПеременной(Переменные,"УИДОрганизации");
УИДСкладовИсключений = ПолучитьЗначениеПеременной(Переменные,"УИДСкладовИсключений");

//МассивУИДСкладовИсключений = СтрРазделить(УИДСкладовИсключений,",", Ложь);

ТабличныйДокумент = Новый ТабличныйДокумент;
СКД = Отчеты.DT_КонтрольМинимальногоОстатка.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

Настройки = СКД.НастройкиПоУмолчанию;

//МассивСкладов = Новый Массив;
//Для каждого УИД Из МассивУИДСкладовИсключений Цикл
//	МассивСкладов.Добавить(Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД)));
//КонецЦикла;

СкладыИсключение = Настройки.ПараметрыДанных.Элементы.Найти("СкладыИсключение");
СкладыИсключение.Значение = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДСкладовИсключений));

ОтборОрганизация = Настройки.Отбор.Элементы[0];
ОтборОрганизация.ПравоеЗначение = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДОрганизации));

Запрос = Новый Запрос;

Запрос.Текст = "ВЫБРАТЬ
           |	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
           |	ХозрасчетныйВидыСубконто.ВидСубконто,
           |	ХозрасчетныйВидыСубконто.Суммовой
           |ПОМЕСТИТЬ ВидыСубконто
           |ИЗ
           |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
           |ГДЕ
           |	ХозрасчетныйВидыСубконто.Ссылка В(&СчетаУчетаТоваров)
           |	И ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконтоСклады
           |
           |ИНДЕКСИРОВАТЬ ПО
           |	Счет
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ
           |	ВидыСубконто.Счет КАК Счет
           |ИЗ
           |	ВидыСубконто КАК ВидыСубконто
           |ГДЕ
           |	ВидыСубконто.Суммовой = ИСТИНА
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ
           |	ВидыСубконто.Счет
           |ИЗ
           |	ВидыСубконто КАК ВидыСубконто
           |ГДЕ
           |	ВидыСубконто.Суммовой = ЛОЖЬ
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ
           |	Хозрасчетный.Ссылка КАК Счет
           |ИЗ
           |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
           |ГДЕ
           |	НЕ Хозрасчетный.Ссылка В
           |				(ВЫБРАТЬ
           |					ВидыСубконто.Счет КАК Счет
           |				ИЗ
           |					ВидыСубконто КАК ВидыСубконто)
           |	И Хозрасчетный.Ссылка В(&СчетаУчетаТоваров)";
		   
Запрос.УстановитьПараметр("СчетаУчетаТоваров", БухгалтерскиеОтчеты.СчетаУчетаТоваров());
Запрос.УстановитьПараметр("ВидСубконтоСклады", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

Результат = Запрос.ВыполнитьПакет();

СтруктураСчетов = Новый Структура;
СтруктураСчетов.Вставить("СчетаУчетаСкладИНоменклатура", Результат[1].Выгрузить().ВыгрузитьКолонку("Счет"));
СтруктураСчетов.Вставить("СчетаУчетаСкладТолькоКоличествоИНоменклатура", Результат[2].Выгрузить().ВыгрузитьКолонку("Счет"));
СтруктураСчетов.Вставить("СчетаУчетаНоменклатураБезСклада", Результат[3].Выгрузить().ВыгрузитьКолонку("Счет"));

Для Каждого Счета Из СтруктураСчетов Цикл
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Настройки, Счета.Ключ, Счета.Значение);
КонецЦикла;
Расшифровка = Новый ДанныеРасшифровкиКомпоновкиДанных;
КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;    

МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки, Расшифровка);   

ВнешниеПараметры = Новый Структура;    
ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеПараметры, Расшифровка);    

ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);    
ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина); 

Если ТабличныйДокумент.ВысотаТаблицы > 2 Тогда
//Не пустой отчет
	ПотокФайла = Новый ПотокВПамяти();
	ТабличныйДокумент.Записать(ПотокФайла,ТипФайлаТабличногоДокумента.XLSX);
	ДвоичныеДанныеФайла = ПотокФайла.ЗакрытьИПолучитьДвоичныеДанные();

	Вложения = Новый Массив; 

	Вложение = Новый Структура;
	Вложение.Вставить("Представление", "Контроль минимального остатка от " + Формат(ТекущаяДата(),"ДФ=ddMMyyyy") + ".xlsx");
	Вложение.Вставить("АдресВоВременномХранилище", ДвоичныеДанныеФайла);
	Вложения.Добавить(Вложение);                   

	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", "Контроль минимальных остатков");
	ПараметрыПисьма.Вставить("Тело", "");
	ПараметрыПисьма.Вставить("Кому", Кому);
	ПараметрыПисьма.Вставить("Вложения", Вложения);

	МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
	Попытка 
		УчетнаяЗапись = МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		Письмо = МодульРаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
		МодульРаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = \u0027Бизнес-процессы и задачи.Уведомление об отмененных задачах\u0027",
		ОбщегоНазначения.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Ошибка,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = \u0027Ошибка при отправке уведомления об отмененных задачах: %1\u0027"), 
		   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;  
КонецЕсли;',
  'Комментарий': ''
 },
 'ТЧ': [
  {
   'Переменные': [
    {
     'Имя': 'УИДОрганизации',
     'Разделитель': null,
     'ЗначениеСтрока': '8b49516c-1a0d-11e7-bf79-74d43585785a',
     'Комментарий': ''
    },
    {
     'Имя': 'УИДСкладовИсключений',
     'Разделитель': null,
     'ЗначениеСтрока': '67d8c99b-245d-11ed-aa77-34c93d2ed848',
     'Комментарий': ''
    }
   ]
  }
 ]
}
